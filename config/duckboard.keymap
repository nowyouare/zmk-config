/* Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 *
 * Author: Jack Hartstein
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define FUNC 1
#define RGB_BT 2

#define TIMEOUT 200

/ {
    combos {
        compatible = "zmk,combos";
        combo_bootloader {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 4>;
            bindings = <&bootloader>;
        };
        combo_reset {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 3>;
            bindings = <&reset>;
        };

        combo_btnxt {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 6>;
            bindings = <&bt BT_NXT>;
            layers = <2>;
        };
        combo_btprv {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 7>;
            bindings = <&bt BT_PRV>;
            layers = <2>;
        };
        combo_btclr {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 8>;
            bindings = <&bt BT_CLR>;
            layers = <2>;
        };

        combo_prtsc {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 11>;
            bindings = <&kp PRINTSCREEN>;
            layers = <1>;
        };
        combo_pause {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 13>;
            bindings = <&kp PAUSE_BREAK>;
            layers = <1>;
        };

        combo_layer0 {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 16>;
            bindings = <&to DEFAULT>;
        };
        combo_layer1 {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 17>;
            bindings = <&to FUNC>;
        };
        combo_layer2 {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 18>;
            bindings = <&to RGB_BT>;
        };

        combo_rgb {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 22>;
            bindings = <&rgb_ug RGB_TOG>;
        };        
    };
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
                &none           &to FUNC       &kp SLASH      &kp ASTERISK    &kp MINUS
                &none           &kp NUMBER_7   &kp NUMBER_8   &kp NUMBER_9    &kp PLUS
                &none           &kp NUMBER_4   &kp NUMBER_5   &kp NUMBER_6    &kp PLUS
                &kp C_MUTE      &kp NUMBER_1   &kp NUMBER_2   &kp NUMBER_3    &kp ENTER
                &kp BACKSPACE   &kp NUMBER_0   &kp NUMBER_0   &kp DOT         &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

         func_layer {
             bindings = <
                &none           &to DEFAULT    &trans        &trans          &kp BACKSPACE
                &none           &kp HOME       &kp UP        &kp PG_UP       &kp PLUS
                &none           &kp LEFT       &kp DOWN      &kp RIGHT       &kp PLUS
                &kp C_MUTE      &kp END        &kp DOWN      &kp PG_DN       &kp ENTER
                &to RGB_BT      &kp INS        &kp INS       &kp DEL         &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
         };

         rgb_bt_layer {
             bindings = <
                &none              &to FUNC         &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI
                &none              &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD
                &none              &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD
                &ext_power EP_TOG  &none            &none            &none            &none
                &to FUNC           &none            &none            &none            &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
         };
    };
};
